# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1CustomBlockSize(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discard_granularity': 'int',
        'logical': 'int',
        'physical': 'int'
    }

    attribute_map = {
        'discard_granularity': 'discardGranularity',
        'logical': 'logical',
        'physical': 'physical'
    }

    def __init__(self, discard_granularity=None, logical=None, physical=None):
        """
        V1CustomBlockSize - a model defined in Swagger
        """

        self._discard_granularity = None
        self._logical = None
        self._physical = None

        if discard_granularity is not None:
          self.discard_granularity = discard_granularity
        if logical is not None:
          self.logical = logical
        if physical is not None:
          self.physical = physical

    @property
    def discard_granularity(self):
        """
        Gets the discard_granularity of this V1CustomBlockSize.

        :return: The discard_granularity of this V1CustomBlockSize.
        :rtype: int
        """
        return self._discard_granularity

    @discard_granularity.setter
    def discard_granularity(self, discard_granularity):
        """
        Sets the discard_granularity of this V1CustomBlockSize.

        :param discard_granularity: The discard_granularity of this V1CustomBlockSize.
        :type: int
        """

        self._discard_granularity = discard_granularity

    @property
    def logical(self):
        """
        Gets the logical of this V1CustomBlockSize.

        :return: The logical of this V1CustomBlockSize.
        :rtype: int
        """
        return self._logical

    @logical.setter
    def logical(self, logical):
        """
        Sets the logical of this V1CustomBlockSize.

        :param logical: The logical of this V1CustomBlockSize.
        :type: int
        """

        self._logical = logical

    @property
    def physical(self):
        """
        Gets the physical of this V1CustomBlockSize.

        :return: The physical of this V1CustomBlockSize.
        :rtype: int
        """
        return self._physical

    @physical.setter
    def physical(self, physical):
        """
        Sets the physical of this V1CustomBlockSize.

        :param physical: The physical of this V1CustomBlockSize.
        :type: int
        """

        self._physical = physical

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1CustomBlockSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
