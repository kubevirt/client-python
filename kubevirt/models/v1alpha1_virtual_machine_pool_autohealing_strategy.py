# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1alpha1VirtualMachinePoolAutohealingStrategy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_failing_to_start_duration': 'K8sIoApimachineryPkgApisMetaV1Duration',
        'start_up_failure_threshold': 'int'
    }

    attribute_map = {
        'min_failing_to_start_duration': 'minFailingToStartDuration',
        'start_up_failure_threshold': 'startUpFailureThreshold'
    }

    def __init__(self, min_failing_to_start_duration=None, start_up_failure_threshold=None):
        """
        V1alpha1VirtualMachinePoolAutohealingStrategy - a model defined in Swagger
        """

        self._min_failing_to_start_duration = None
        self._start_up_failure_threshold = None

        if min_failing_to_start_duration is not None:
          self.min_failing_to_start_duration = min_failing_to_start_duration
        if start_up_failure_threshold is not None:
          self.start_up_failure_threshold = start_up_failure_threshold

    @property
    def min_failing_to_start_duration(self):
        """
        Gets the min_failing_to_start_duration of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        MinFailingToStartDuration is the minimum time a VM must be in a failing status (applies to status conditions like CrashLoopBackOff, Unschedulable) before being replaced. It measures the duration since the VM's Ready condition transitioned to False. Defaults to 5 minutes

        :return: The min_failing_to_start_duration of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        :rtype: K8sIoApimachineryPkgApisMetaV1Duration
        """
        return self._min_failing_to_start_duration

    @min_failing_to_start_duration.setter
    def min_failing_to_start_duration(self, min_failing_to_start_duration):
        """
        Sets the min_failing_to_start_duration of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        MinFailingToStartDuration is the minimum time a VM must be in a failing status (applies to status conditions like CrashLoopBackOff, Unschedulable) before being replaced. It measures the duration since the VM's Ready condition transitioned to False. Defaults to 5 minutes

        :param min_failing_to_start_duration: The min_failing_to_start_duration of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        :type: K8sIoApimachineryPkgApisMetaV1Duration
        """

        self._min_failing_to_start_duration = min_failing_to_start_duration

    @property
    def start_up_failure_threshold(self):
        """
        Gets the start_up_failure_threshold of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        StartUpFailureThreshold is the number of consecutive VMI start failures (it tracks the value of Status.StartFailure.ConsecutiveFailCount field) before replacing the VM. Defaults to 3

        :return: The start_up_failure_threshold of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        :rtype: int
        """
        return self._start_up_failure_threshold

    @start_up_failure_threshold.setter
    def start_up_failure_threshold(self, start_up_failure_threshold):
        """
        Sets the start_up_failure_threshold of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        StartUpFailureThreshold is the number of consecutive VMI start failures (it tracks the value of Status.StartFailure.ConsecutiveFailCount field) before replacing the VM. Defaults to 3

        :param start_up_failure_threshold: The start_up_failure_threshold of this V1alpha1VirtualMachinePoolAutohealingStrategy.
        :type: int
        """

        self._start_up_failure_threshold = start_up_failure_threshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1alpha1VirtualMachinePoolAutohealingStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
