# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1DataVolumeSourceVDDK(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backing_file': 'str',
        'extra_args': 'str',
        'init_image_url': 'str',
        'secret_ref': 'str',
        'thumbprint': 'str',
        'url': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'backing_file': 'backingFile',
        'extra_args': 'extraArgs',
        'init_image_url': 'initImageURL',
        'secret_ref': 'secretRef',
        'thumbprint': 'thumbprint',
        'url': 'url',
        'uuid': 'uuid'
    }

    def __init__(self, backing_file=None, extra_args=None, init_image_url=None, secret_ref=None, thumbprint=None, url=None, uuid=None):
        """
        V1beta1DataVolumeSourceVDDK - a model defined in Swagger
        """

        self._backing_file = None
        self._extra_args = None
        self._init_image_url = None
        self._secret_ref = None
        self._thumbprint = None
        self._url = None
        self._uuid = None

        if backing_file is not None:
          self.backing_file = backing_file
        if extra_args is not None:
          self.extra_args = extra_args
        if init_image_url is not None:
          self.init_image_url = init_image_url
        if secret_ref is not None:
          self.secret_ref = secret_ref
        if thumbprint is not None:
          self.thumbprint = thumbprint
        if url is not None:
          self.url = url
        if uuid is not None:
          self.uuid = uuid

    @property
    def backing_file(self):
        """
        Gets the backing_file of this V1beta1DataVolumeSourceVDDK.
        BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi

        :return: The backing_file of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._backing_file

    @backing_file.setter
    def backing_file(self, backing_file):
        """
        Sets the backing_file of this V1beta1DataVolumeSourceVDDK.
        BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi

        :param backing_file: The backing_file of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._backing_file = backing_file

    @property
    def extra_args(self):
        """
        Gets the extra_args of this V1beta1DataVolumeSourceVDDK.
        ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library

        :return: The extra_args of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._extra_args

    @extra_args.setter
    def extra_args(self, extra_args):
        """
        Sets the extra_args of this V1beta1DataVolumeSourceVDDK.
        ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library

        :param extra_args: The extra_args of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._extra_args = extra_args

    @property
    def init_image_url(self):
        """
        Gets the init_image_url of this V1beta1DataVolumeSourceVDDK.
        InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map

        :return: The init_image_url of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._init_image_url

    @init_image_url.setter
    def init_image_url(self, init_image_url):
        """
        Sets the init_image_url of this V1beta1DataVolumeSourceVDDK.
        InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map

        :param init_image_url: The init_image_url of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._init_image_url = init_image_url

    @property
    def secret_ref(self):
        """
        Gets the secret_ref of this V1beta1DataVolumeSourceVDDK.
        SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host

        :return: The secret_ref of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """
        Sets the secret_ref of this V1beta1DataVolumeSourceVDDK.
        SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host

        :param secret_ref: The secret_ref of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._secret_ref = secret_ref

    @property
    def thumbprint(self):
        """
        Gets the thumbprint of this V1beta1DataVolumeSourceVDDK.
        Thumbprint is the certificate thumbprint of the vCenter or ESXi host

        :return: The thumbprint of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """
        Sets the thumbprint of this V1beta1DataVolumeSourceVDDK.
        Thumbprint is the certificate thumbprint of the vCenter or ESXi host

        :param thumbprint: The thumbprint of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def url(self):
        """
        Gets the url of this V1beta1DataVolumeSourceVDDK.
        URL is the URL of the vCenter or ESXi host with the VM to migrate

        :return: The url of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this V1beta1DataVolumeSourceVDDK.
        URL is the URL of the vCenter or ESXi host with the VM to migrate

        :param url: The url of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """
        Gets the uuid of this V1beta1DataVolumeSourceVDDK.
        UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi

        :return: The uuid of this V1beta1DataVolumeSourceVDDK.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this V1beta1DataVolumeSourceVDDK.
        UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi

        :param uuid: The uuid of this V1beta1DataVolumeSourceVDDK.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1DataVolumeSourceVDDK):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
