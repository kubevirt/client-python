# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1PreferenceRequirements(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'architecture': 'str',
        'cpu': 'V1beta1CPUPreferenceRequirement',
        'memory': 'V1beta1MemoryPreferenceRequirement'
    }

    attribute_map = {
        'architecture': 'architecture',
        'cpu': 'cpu',
        'memory': 'memory'
    }

    def __init__(self, architecture=None, cpu=None, memory=None):
        """
        V1beta1PreferenceRequirements - a model defined in Swagger
        """

        self._architecture = None
        self._cpu = None
        self._memory = None

        if architecture is not None:
          self.architecture = architecture
        if cpu is not None:
          self.cpu = cpu
        if memory is not None:
          self.memory = memory

    @property
    def architecture(self):
        """
        Gets the architecture of this V1beta1PreferenceRequirements.
        Required Architecture of the VM referencing this preference

        :return: The architecture of this V1beta1PreferenceRequirements.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """
        Sets the architecture of this V1beta1PreferenceRequirements.
        Required Architecture of the VM referencing this preference

        :param architecture: The architecture of this V1beta1PreferenceRequirements.
        :type: str
        """

        self._architecture = architecture

    @property
    def cpu(self):
        """
        Gets the cpu of this V1beta1PreferenceRequirements.
        Required CPU related attributes of the instancetype.

        :return: The cpu of this V1beta1PreferenceRequirements.
        :rtype: V1beta1CPUPreferenceRequirement
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this V1beta1PreferenceRequirements.
        Required CPU related attributes of the instancetype.

        :param cpu: The cpu of this V1beta1PreferenceRequirements.
        :type: V1beta1CPUPreferenceRequirement
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this V1beta1PreferenceRequirements.
        Required Memory related attributes of the instancetype.

        :return: The memory of this V1beta1PreferenceRequirements.
        :rtype: V1beta1MemoryPreferenceRequirement
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this V1beta1PreferenceRequirements.
        Required Memory related attributes of the instancetype.

        :param memory: The memory of this V1beta1PreferenceRequirements.
        :type: V1beta1MemoryPreferenceRequirement
        """

        self._memory = memory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1PreferenceRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
